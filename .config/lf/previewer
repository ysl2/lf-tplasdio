#!/bin/sh

# File preview handler for lf.
# Dependencies:
#	- GNU 'file' or similar (file detection)
#	- bat (text)
#	- uebergzug (images)
#	- ffmpegthumbnailer (videos)
#	- exiftool (metadata/audio, and file detection for .webm files)
#	- jq (json and metadata)
#	- lynx (html/web pages)
#	- pdftoppm (pdf)
#	- odt2txt (odt)
#	- atool (archives)
#	- gpg (PGP encrypted files)
#	- man (troff manuals)
#	- Other: stat, cut, sha256sum

# Notes:
#	- If using alacritty's same process: 'alacritty msg create-window', previews only show in first window

set -C -f
IFS='
'

image() {
	if [ -f "$1" ] && [ "$DISPLAY" ] && [ ! "$WAYLAND_DISPLAY" ] \
		&& hash ueberzug >/dev/null 2>&1
	then
		printf '{"action": "add", "identifier": "PREVIEW", "x": "%s", "y": "%s", "width": "%s", "height": "%s", "scaler": "contain", "path": "%s"}\n' \
			"$4" "$5" "$(($2-1))" "$(($3-1))" "$1" > "$FIFO_UEBERZUG"
	else
		exiftool -j "$6" | jq -C
	fi
}

ifub() {
	if [ "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ]; then
		command -V ueberzug >/dev/null 2>&1
	fi
}

# Note that the cache file name is a function of file information, meaning if
# an image appears in multiple places across the machine, it will not have to
# be regenerated once seen.

create_cache() {
	CACHE="${XDG_CACHE_HOME:-"$HOME/.cache"}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' \
		-- "$(readlink -f "$1")" \
		| sha256sum \
		| cut -d' ' -f1)"
}

mime_preview(){
	# The 'ran_guard' variable is there in case I need to do recursion
	# because the initial mime_type variable wasn't enough to determine
	# an adequate preview
	case "$mime_type","$ran_guard" in
		image/*,0)
			image "$1" "$2" "$3" "$4" "$5" "$1"
			;;
		text/html,0)
			lynx -width="$4" -display_charset=utf-8 -dump -- "$1"
			;;
		text/troff,0)
			man ./ "$1" | col -b
			;;
		text/*,0 | */xml,0 | application/javascript,0)
			bat --terminal-width "$(($4-2))" -f "$1" --style=numbers
			;;
		application/x-pie-executable,0 | application/x-executable,0 | \
		application/x-sharedlib,0)
			objdump -d "$1" -M intel
			#readelf -WCa "$1"
			;;
		application/x-executable,0)
			hexdump -C "$1" | xxd "$1"
			;;
		application/json,0)
			case "${1##*.}" in
				ipynb)
					# Needs my fork of ipynb-py-convert
					ipynb-py-convert --stdout "$1" \
						| bat --color=always -l python --style=numbers
					;;
				*) jq -C < "$1" ;;
			esac
			;;
		application/zip,0 | application/x-7z-compressed,0 )
			atool --list -- "$1"
			;;
		audio/*,[01])
			exiftool -j "$1" | jq -C
			;;
		video/webm,0)
			# file --mime-type doesn't distinguish well between "video/webm"
			# actual webm videos or webm audios, but exiftool does, thus
			# re-run this function with new mimetype
			mime_type="$(exiftool -s3 -MIMEType "$1")" \
			ran_guard=$((ran_guard+1))
			mime_preview "$@"
			;;
		video/*,[01])
			create_cache "$1"
			[ -f "$CACHE" ] \
				|| ffmpegthumbnailer -i "$1" -o "$CACHE" -s 0
			image "$CACHE" "$2" "$3" "$4" "$5" "$1"
			;;
		*/pdf,0 | */postscript,0)
			create_cache "$1"
			[ -f "$CACHE.jpg" ] \
				|| pdftoppm -jpeg -f 1 -singlefile "$1" "$CACHE"
			image "$CACHE.jpg" "$2" "$3" "$4" "$5" "$1"
			;;
		*opendocument*,0)
			odt2txt "$1"
			;;
		# TODO: add lf command to decrypt it and show the decrypted file in preview window
		application/pgp-encrypted,0)
			printf "PGP armored ASCII \033[1;31mencrypted\033[m file,\ntry using gpg to decrypt it\n\n"
			cat "$1"
			#gpg -d -- "$1"
			;;
		application/octet-stream,0)
			#extension="${1##*.}" extension="${extension%"$1"}"
			case "${1##*.}" in
				gpg)
					printf "OpenPGP \033[1;31mencrypted\033[m file,\ntry using gpg to decrypt it\n\n"
					;;
				*) exiftool -j "$1" | jq -C
					;;
			esac
			;;
		application/vnd.sqlite3,0)
			# TODO: handle multiple tables, maybe it's better to show tables and columns in a tree format
			table=$(sqlite3 "$1" '.tables')
			sqlite3 "$1" ".headers on" ".mode markdown" "select * from $table"
			;;
	esac
	return 1
}

main() {
	mime_type="$(file --dereference -b --mime-type -- "$1")" \
	ran_guard=0
	mime_preview "$@" || return $?
}

main "$@" || exit $?
